// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id_user Int @unique @id @default(autoincrement())
  name String  @unique
  avatar String?
  GameFlag Int?
  TwoFactor Boolean?
  ISVERIDIED Boolean?
  IsFirstTime Boolean?
  InGame Boolean?
  secretKey String?
  About String?
  status_user String?
  email String?
  stat Stat?
  WonBot Int?
  LoseBot Int?
  wins Int?
  losses Int?
  games_played Int?
  Progress Int?
  Wins_percent Int?
  Losses_percent Int?
  achievments Achievments[]
  history History[]
  notification Notification[]
  homies Boolean?
  invited Boolean?
  homie_id Int?
  blockedUser BlockedUser[]
  freind Freind[]
  channels MemberChannel[]
  sentDms Dm[] @relation("DmSender")
  recvDms Dm[] @relation("DmReceiver")

}

model Achievments{
  id Int @id @default(autoincrement())
  achieve String?
  msg String?
  userId Int
  user User @relation (fields: [userId], references: [id_user])
}

model Notification {
  id Int @id @default(autoincrement())
  userId Int
  AcceptFriend Boolean?
  GameInvitation Boolean?
  id_user Int?
  email String?
  avatar String?
  name String?
  createdAt DateTime @default(now())
  user User @relation (fields: [userId], references: [id_user])
}

model Stat {
  id_stat Int @id @default(autoincrement())
  result String
  level Int
  achievment String
  userId Int @unique
  user User @relation (fields: [userId], references: [id_user])
}

model History{
  winner Boolean?
  id_history Int @id @default(autoincrement())
  useravatar String?
  username String?
  userId Int
  userscore Int?
  enemyId Int?
  enemyname String?
  enemyavatar String?
  enemyscore Int?
  user User @relation (fields: [userId], references: [id_user])
}

model BlockedUser{
  id Int @id @default(autoincrement())
  userId Int
  id_blocked_user Int
  user User @relation (fields: [userId], references: [id_user])
}

model Freind{
  id  Int @id @default(autoincrement())
  name String?
  userId Int
  id_freind Int?
  user User @relation (fields: [userId], references: [id_user])
}

model Dm{
  id_dm  Int  @id @default(autoincrement())
  senderId Int      //
  receiverId Int   //
  unread Int
  pinned Boolean
  // sender User @relation(fields: [senderId], references: [id_user])
    // Define the relationship with the sender
  sender User @relation("DmSender", fields: [senderId], references: [id_user])
  // // Define the relationship with the receiver
  receiver User @relation("DmReceiver", fields: [receiverId], references: [id_user])
  conversation Conversation[]

  @@unique([senderId, receiverId])   //this unique constraint ensures that you cannot have duplicate entries in the "Dm" table where the same sender sends a message to the same receiver more than once
}

model Conversation{
  id Int @id @default(autoincrement())
  text String
  dateSent DateTime @default(now())
  // outgoing Boolean 
  // incoming Boolean 
  outgoing Int 
  incoming Int 
  type String
  // senderId Int     
  // receiverId Int  
  idDm Int
  dm Dm @relation(fields: [idDm], references: [id_dm])
  // dm Dm   @relation(fields: [senderId, receiverId], references: [senderId, receiverId])

}

model Channel {
  id_channel  Int        @id @default(autoincrement())
  name        String     @unique
  img         String?
  visibility  String
  password    String?
  users       MemberChannel[]
}

model MemberChannel {
  user                User          @relation(fields: [userId], references: [id_user])
  userId              Int
  channel             Channel       @relation(fields: [channelId], references: [id_channel])
  channelId           Int
  status_UserInChannel String  // values that contains are owner admin or member.
  muted               Boolean?  // new added.
  discussions         Discussion[]
  period             DateTime?
  banned ChannelBan? // for a muted number.
  @@id([userId, channelId]) 
}

model Discussion {
  id_disc           Int          @id @default(autoincrement())
  message           String
  dateSent          DateTime     @default(now())
  userId            Int 
  channelId         Int 
  memberchannel     MemberChannel @relation(fields: [userId,channelId ], references: [userId, channelId])
}

model ChannelBan {   
  bannedUser          MemberChannel   @relation(fields: [bannedUserId, channelId], references: [userId, channelId])
  bannedUserId        Int
  channelId           Int
  status_User String // will contains soit blocked from the channel, banned or kicked,
  @@id([bannedUserId, channelId])
}

model saveBanned { 
  id  Int          @id @default(autoincrement())
  bannedUserId        Int
  channelId           Int
  status_User String 
}
